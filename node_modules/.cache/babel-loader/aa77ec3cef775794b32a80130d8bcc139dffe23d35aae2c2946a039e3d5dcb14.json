{"ast":null,"code":"import { FETCH_USERS_REQUEST, FETCH_USERS_SUCESS, FETCH_USERS_ERROR, UPDATE_USERS_REQUEST, UPDATE_USERS_SUCESS, UPDATE_USERS_ERROR, CREATE_USERS_REQUEST, CREATE_USERS_SUCESS, CREATE_USERS_ERROR } from \"../constants/usersConstants\";\nexport const loadUsers = () => async dispath => {\n  try {\n    dispath({\n      type: FETCH_USERS_REQUEST\n    });\n    const url = \"http://localhost:3000/users\";\n    const res = await fetch(url);\n    const data = await res.json();\n    dispath({\n      type: FETCH_USERS_SUCESS,\n      data\n    });\n  } catch (err) {\n    dispath({\n      type: FETCH_USERS_ERROR,\n      message: err\n    });\n  }\n};\nexport const updateUser = (user, data) => async dispath => {\n  try {\n    dispath({\n      type: UPDATE_USERS_REQUEST\n    });\n    const url = \"http://localhost:3000/users\";\n    const userId = user.id;\n    const updateData = {\n      ...user,\n      password: data\n    };\n    const res = await fetch(url + \"/\" + userId, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updateData)\n    });\n    const resJson = await res.json();\n    dispath({\n      type: UPDATE_USERS_SUCESS,\n      resJson\n    });\n  } catch (err) {\n    dispath({\n      type: UPDATE_USERS_ERROR,\n      message: err\n    });\n  }\n};\nexport const createUser = data => async dispath => {\n  try {\n    dispath({\n      type: CREATE_USERS_REQUEST\n    });\n    const url = \"http://localhost:3000/users\";\n    const newData = data;\n    const res = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newData)\n    });\n    const resJson = await res.json();\n    dispath({\n      type: CREATE_USERS_SUCESS,\n      resJson\n    });\n  } catch (err) {\n    dispath({\n      type: CREATE_USERS_ERROR,\n      message: err\n    });\n  }\n};","map":{"version":3,"names":["FETCH_USERS_REQUEST","FETCH_USERS_SUCESS","FETCH_USERS_ERROR","UPDATE_USERS_REQUEST","UPDATE_USERS_SUCESS","UPDATE_USERS_ERROR","CREATE_USERS_REQUEST","CREATE_USERS_SUCESS","CREATE_USERS_ERROR","loadUsers","dispath","type","url","res","fetch","data","json","err","message","updateUser","user","userId","id","updateData","password","method","headers","body","JSON","stringify","resJson","createUser","newData"],"sources":["/Users/Tamhayhoc/react-webpack/EasyCuk/src/redux/actions/usersAction.js"],"sourcesContent":["import {\n  FETCH_USERS_REQUEST,\n  FETCH_USERS_SUCESS,\n  FETCH_USERS_ERROR,\n  UPDATE_USERS_REQUEST,\n  UPDATE_USERS_SUCESS,\n  UPDATE_USERS_ERROR,\n  CREATE_USERS_REQUEST,\n  CREATE_USERS_SUCESS,\n  CREATE_USERS_ERROR,\n} from \"../constants/usersConstants\";\n\nexport const loadUsers = () => async (dispath) => {\n  try {\n    dispath({ type: FETCH_USERS_REQUEST });\n\n    const url = \"http://localhost:3000/users\";\n    const res = await fetch(url);\n    const data = await res.json();\n\n    dispath({ type: FETCH_USERS_SUCESS, data });\n  } catch (err) {\n    dispath({ type: FETCH_USERS_ERROR, message: err });\n  }\n};\n\nexport const updateUser = (user, data) => async (dispath) => {\n  try {\n    dispath({ type: UPDATE_USERS_REQUEST });\n\n    const url = \"http://localhost:3000/users\";\n    const userId = user.id;\n    const updateData = { ...user, password: data };\n    const res = await fetch(url + \"/\" + userId, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(updateData),\n    });\n    const resJson = await res.json();\n\n    dispath({ type: UPDATE_USERS_SUCESS, resJson });\n  } catch (err) {\n    dispath({ type: UPDATE_USERS_ERROR, message: err });\n  }\n};\n\nexport const createUser = (data) => async (dispath) => {\n  try {\n    dispath({ type: CREATE_USERS_REQUEST });\n\n    const url = \"http://localhost:3000/users\";\n    const newData = data;\n    const res = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newData),\n    });\n    const resJson = await res.json();\n\n    dispath({ type: CREATE_USERS_SUCESS, resJson });\n  } catch (err) {\n    dispath({ type: CREATE_USERS_ERROR, message: err });\n  }\n};\n"],"mappings":"AAAA,SACEA,mBAAmB,EACnBC,kBAAkB,EAClBC,iBAAiB,EACjBC,oBAAoB,EACpBC,mBAAmB,EACnBC,kBAAkB,EAClBC,oBAAoB,EACpBC,mBAAmB,EACnBC,kBAAkB;AAGpB,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM,MAAOC,OAAO,IAAK;EAChD,IAAI;IACFA,OAAO,CAAC;MAAEC,IAAI,EAAEX;IAAoB,CAAC,CAAC;IAEtC,MAAMY,GAAG,GAAG,6BAA6B;IACzC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;IAC5B,MAAMG,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;IAE7BN,OAAO,CAAC;MAAEC,IAAI,EAAEV,kBAAkB;MAAEc;IAAK,CAAC,CAAC;EAC7C,CAAC,CAAC,OAAOE,GAAG,EAAE;IACZP,OAAO,CAAC;MAAEC,IAAI,EAAET,iBAAiB;MAAEgB,OAAO,EAAED;IAAI,CAAC,CAAC;EACpD;AACF,CAAC;AAED,OAAO,MAAME,UAAU,GAAGA,CAACC,IAAI,EAAEL,IAAI,KAAK,MAAOL,OAAO,IAAK;EAC3D,IAAI;IACFA,OAAO,CAAC;MAAEC,IAAI,EAAER;IAAqB,CAAC,CAAC;IAEvC,MAAMS,GAAG,GAAG,6BAA6B;IACzC,MAAMS,MAAM,GAAGD,IAAI,CAACE,EAAE;IACtB,MAAMC,UAAU,GAAG;MAAE,GAAGH,IAAI;MAAEI,QAAQ,EAAET;IAAK,CAAC;IAC9C,MAAMF,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAG,GAAG,GAAG,GAAGS,MAAM,EAAE;MAC1CI,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,UAAU;IACjC,CAAC,CAAC;IACF,MAAMO,OAAO,GAAG,MAAMjB,GAAG,CAACG,IAAI,CAAC,CAAC;IAEhCN,OAAO,CAAC;MAAEC,IAAI,EAAEP,mBAAmB;MAAE0B;IAAQ,CAAC,CAAC;EACjD,CAAC,CAAC,OAAOb,GAAG,EAAE;IACZP,OAAO,CAAC;MAAEC,IAAI,EAAEN,kBAAkB;MAAEa,OAAO,EAAED;IAAI,CAAC,CAAC;EACrD;AACF,CAAC;AAED,OAAO,MAAMc,UAAU,GAAIhB,IAAI,IAAK,MAAOL,OAAO,IAAK;EACrD,IAAI;IACFA,OAAO,CAAC;MAAEC,IAAI,EAAEL;IAAqB,CAAC,CAAC;IAEvC,MAAMM,GAAG,GAAG,6BAA6B;IACzC,MAAMoB,OAAO,GAAGjB,IAAI;IACpB,MAAMF,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;MAC3Ba,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACG,OAAO;IAC9B,CAAC,CAAC;IACF,MAAMF,OAAO,GAAG,MAAMjB,GAAG,CAACG,IAAI,CAAC,CAAC;IAEhCN,OAAO,CAAC;MAAEC,IAAI,EAAEJ,mBAAmB;MAAEuB;IAAQ,CAAC,CAAC;EACjD,CAAC,CAAC,OAAOb,GAAG,EAAE;IACZP,OAAO,CAAC;MAAEC,IAAI,EAAEH,kBAAkB;MAAEU,OAAO,EAAED;IAAI,CAAC,CAAC;EACrD;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}